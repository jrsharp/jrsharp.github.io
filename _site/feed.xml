<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xslt/rss.xslt" ?>
<?xml-stylesheet type="text/css" href="/assets/css/rss.css" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Jon Sharp, logged on the web</title>
		<description>Personal website of Jon Sharp - a Seventh-day Adventist Christian, family man, lover of the outdoors, technology leader, enterprise architect, embedded systems engineer, and retrocomputing enthusiast.</description>
		<link>http://jonsharp.net/</link>
		<atom:link href="http://jonsharp.net/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Bare-metal Macintosh Programming - Part 1</title>
				<link>http://jonsharp.net/retrocomputing/bare-metal-macintosh-programming-part-1/</link>
				<pubDate>Wed, 31 Aug 2016 00:00:00 +0000</pubDate>
				<description>&lt;p&gt;The original compact Macintoshes (128k, 512k, and Plus) have long been a 
subject of my collection and study, but after acquiring a Canon Cat, I began
to see the Mac in a slightly new light.  The original Macintosh may be a truly
unique blend of hardware and software engineering, but what if you looked at 
the Mac only for its hardware?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;If you know the Mac, you know that it was innovative in large part
because of its ROM.  The Toolbox functions of the ROM really made the Mac
what it was.  As a result, The MacOS (System) software is inextricably linked 
to the ROM code, and the two work together in a clever balance of pointers and 
patched code.  This cleverness and tight engineering allowed the Mac to do a 
lot with its relatively meager resources.&lt;/p&gt;

&lt;p&gt;But what if you threw out the ROM and its Toolbox?  The Mac might start to look
not too different from other 68000-based personal computers of its time.&lt;br /&gt;
What would you do if someone handed you a Macintosh with no available software? 
What if you were tasked with designing an operating system for this new (rather
limited) 68000-based box?  How would you start?  Would you attempt to emulate 
windowing systems from expensive contemporaries like the Lisa and Alto?  Would 
you take a simpler approach?  Maybe something more like the DOSes of the day?&lt;/p&gt;

&lt;p&gt;And what about today?  What features would you include?  Maybe a nice, 
lightweight IP stack? (&lt;a href=&quot;http://savannah.nongnu.org/projects/lwip/&quot;&gt;lwIP&lt;/a&gt;)  How
much could you squeeze into a replacement ROM?  I began to wonder what I could 
get my old Mac to do with the benefit of modern toolchains and open-source 
stacks and kernels.  Relying on all of the available documentation, the 
original Macintosh becomes a blank slate for our imagination.&lt;/p&gt;

&lt;p&gt;This first article in my &lt;em&gt;bare-metal Macintosh programming series&lt;/em&gt; describes 
my first steps down this road.&lt;/p&gt;

&lt;h2 id=&quot;a-proof-of-concept-demo&quot;&gt;A proof-of-concept demo&lt;/h2&gt;

&lt;p&gt;In my search for information on the Macintosh boot process, I ran across 
&lt;a href=&quot;https://gist.github.com/kmcallister/3236565ed7eb7b45cf99&quot;&gt;this Gist&lt;/a&gt; that
outlines a method for booting arbitrary code on a 68k Macintosh – that is,
&lt;em&gt;without&lt;/em&gt; Mac OS.  Bingo.  This was the starting point I needed to begin 
exploring my thoughts on alternative software/firmware for the Mac.&lt;/p&gt;

&lt;p&gt;I decided my first step was to develop the simplest demo I could think of that would 
show off some of the Mac’s hardware while compact enough to fit into the boot
sector (first 1K) of a floppy.  So I set out to build a simple
bare-metal Macintosh demo written in 68k assembly that displays my own smiling 
face on the machine’s 1-bit framebuffer.&lt;/p&gt;

&lt;p&gt;I targeted the Macintosh Plus for the extra RAM and becuase Mini vMac emulates
it by default, but the code should run fine on the 128k/512k as well, now that
I’m using the ROM vector to get the frambuffer start address.  The 68000 of 
these original Macintosh models makes them feel a lot like modern embedded 
systems.  And that’s roughly the approach I’ve taken in thinking of the hardware
 – working with it like a modern, MMU-less ARM microcontroller.&lt;/p&gt;

&lt;p&gt;Here’s the result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jonsharp.net/images/HappyJon1.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I’m smiling becuase it works ;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;(I used &lt;a href=&quot;https://www.gimp.org/&quot;&gt;The Gimp&lt;/a&gt; to create my 1-bit bitmap code block)&lt;/p&gt;

&lt;p&gt;And on to &lt;em&gt;how&lt;/em&gt; it works…&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;/h2&gt;

&lt;p&gt;The code listing follows below. (missing only the full bitmap data)  The
necessary boot block header was borrowed from the 
&lt;a href=&quot;http://www.gryphel.com/c/minivmac/&quot;&gt;Emile project&lt;/a&gt; and is based on the 
Inside Macintosh documentation.&lt;/p&gt;

&lt;p&gt;The startup code in the Macintosh ROM eventually loads the first 1024 bytes off
of the disk and this bootblock is then responsible for bootstrapping the OS.
(or other arbitrary code such as our framebuffer demo)&lt;/p&gt;

&lt;p&gt;The code itself is rather simple, basic memory copy loops, responsible for
clearing the entire display (white) and copying the bitmap data onto the 
center of the screen.  You may notice that the Mac’s characteristic rounded
corners are of course no longer visible.&lt;/p&gt;

&lt;p&gt;At the end is an endless loop, producing a subtle animation effect.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;# HappyJon Demo
#
# Produced using &quot;68k Mac boot floppy example&quot; template
#
# Boot block header based on first/first.S
# from http://emile.sourceforge.net/
#

# The ROM loads this many bytes from the start of the disk.
.equ stage1_size, 1024

# Define ScrnBase, location in memory containing the start of video memory
.equ ScrnBase, 0x0824

# Macro to define a Pascal string
.macro pString string
pstring_begin_\@:
        .byte   pstring_end_\@ - pstring_string_\@ - 1
pstring_string_\@:
        .string &quot;\string&quot;
pstring_end_\@:
        .fill 16 - (pstring_end_\@ - pstring_begin_\@) , 1, 0
.endm

begin:

ID:          .short  0x4C4B              /* boot blocks signature */
Entry:       bra     start               /* entry point to bootcode */
Version:     .short  0x4418              /* boot blocks version number */
PageFlags:   .short  0x00                /* used internally */
SysName:     pString &quot;Face Demo     &quot;    /* System filename */
ShellName:   pString &quot;Face Demo     &quot;    /* Finder filename */
Dbg1Name:    pString &quot;Face Demo     &quot;    /* debugger filename */
Dbg2Name:    pString &quot;Face Demo     &quot;    /* debugger filename */
ScreenName:  pString &quot;Face Screen   &quot;    /* name of startup screen */
HelloName:   pString &quot;Face          &quot;    /* name of startup program */
ScrapName:   pString &quot;Scrap         &quot;    /* name of system scrap file */
CntFCBs:     .short  10                  /* number of FCBs to allocate */
CntEvts:     .short  20                  /* number of event queue elements */
Heap128K:    .long   0x00004300          /* system heap size on 128K Mac */
Heap256K:    .long   0x00008000          /* used internally */
SysHeapSize: .long   0x00020000          /* system heap size on all machines */

start:
	/* movel	#0x3FA700, %a0 */ /* Start of framebuffer on 4MB Plus */
	movel	(ScrnBase), %a0

	/* clear screen */
	movel	#0x00000000, %d0
	movel	#5472, %d1
clear_loop:
	movel	%d0, (%a0)+
	subi	#1, %d1
	bne	clear_loop

	/* Reset vars for image drawing: */
	lea	buffer, %a1 /* Image data */
	movel	(ScrnBase), %a0
	addal	#7388, %a0 /* Offset to place 64x64 image in center of display */
	movew	#127, %d1
fill_loop:

	movel	(%a1)+, %d0
	movel	%d0, (%a0)+

	/* mod buffer count to find offset and shift memory */
	movel	%d1, %d3
	divuw	#2, %d3
	andil	#0xFFFF0000, %d3
	bne	check_dec

	addal	#56, %a0	/* Move to next line */

check_dec:
	subi	#1, %d1
	bne	fill_loop

	/* One more time! */
	movel	(%a1)+, %d0
	movel	%d0, (%a0)+

	/* Set up an animation / prog indicator: */
	addal	#56, %a0	/* Move to next line */
	movel 	%a0, %a1
	addal	#4, %a1
	movel	#0xFF000000, %d0
	movel	#0x000000FF, %d2

end_loop:
	movel	%d0, (%a0)
	movel	%d2, (%a1)
	rorl	#1, %d0
	roll	#1, %d2
	movel	#10000, %d1
delay_loop:
	nop
	subi	#1, %d1
	bne	delay_loop
	bra	end_loop
end:

buffer:
	dc.l 0b00000000000000000000000000100001
	dc.l 0b11111100000000000000000000000000
	dc.l 0b00000000000000000000000000000011
	dc.l 0b11111100000000000000000000000000
	dc.l 0b00000000000000000000000000111111
	dc.l 0b11111110000000000000000000000000
	dc.l 0b00000000000000000000000001110000
	dc.l 0b01111110000000000000000000000000
	dc.l 0b00000000000000000000000011110111

	...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;a-modern-toolchain&quot;&gt;A modern toolchain&lt;/h2&gt;

&lt;p&gt;Since 68k still lives on, it is an architecture well-supported by GCC, allowing
us to use a familiar toolchain.  I’ve tested several 68k GCC toolchains built
using &lt;a href=&quot;http://crosstool-ng.org/&quot;&gt;crosstool-ng&lt;/a&gt;, across several host platforms. 
(most recently using my venerable &lt;a href=&quot;https://getchip.com/&quot;&gt;chip&lt;/a&gt;)  A quick way
to get started on Windows is to get a pre-built toolchain 
&lt;a href=&quot;http://gnutoolchains.com/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A simple Makefile is responsible for producing the binary output that can be
placed directly onto a disk, or booted directly using an accurate Mac emulator
like &lt;a href=&quot;http://www.gryphel.com/c/minivmac/&quot;&gt;Mini vMac&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;cd HappyJon&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;make&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;&amp;lt;vMac_path&amp;gt;/Mini\ vMac floppy.img&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;clone-build-and-fork&quot;&gt;Clone, Build, and Fork&lt;/h2&gt;

&lt;p&gt;You can check out the code in my &lt;a href=&quot;https://github.com/jrsharp/HappyJon&quot;&gt;HappyJon&lt;/a&gt;
public repository.  Feel free to clone, build and fork my code.  Try it out on
your own vintage Mac. (instructions for creating a working floppy are in the 
README)  Fire up Mini vMac and see what interesting code you can squeeze into 
the boot block.  &lt;/p&gt;

&lt;p&gt;I believe a mirror of the framebuffer memory block is available for 
double-buffering.  It would be fun to see what animations could be created.
Can we start a new Macintosh demoscene? ;)&lt;/p&gt;

&lt;h2 id=&quot;boot-sector-and-beyond&quot;&gt;Boot sector and beyond&lt;/h2&gt;

&lt;p&gt;In Part 2, I will go into the next stage of my bare-metal Macintosh efforts,
where I begin to explore something more useful on my sans-MacOS Plus.  To do
anything meaningful I will need to break out of my 1024-byte boot block jail…&lt;/p&gt;
</description>
				<guid isPermaLink="true">http://jonsharp.net/retrocomputing/bare-metal-macintosh-programming-part-1/</guid>
			</item>
		
			<item>
				<title>impress.js - I'm impressed.</title>
				<link>http://jonsharp.net/impressjs-im-impressed/</link>
				<pubDate>Thu, 22 Mar 2012 05:07:27 +0000</pubDate>
				<description>&lt;p&gt;I thought I’d mention a new tool that my brother, Justin, recommended we use at http://www.campgroundautomation.com for a recent presentation we were putting together.  We had been using Apple’s Keynote, which is certainly a slick piece of software, and miles ahead of PowerPoint, but I recently found it wanting.  In attempting to update our previous corporate Keynote template, I became frustrated with the cumbersome tools and process required.  I wanted to more easily adapt some of the web styles of corporate site into our presentation.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Enter http://bartaz.github.com/impress.js.  I was already somewhat familiar with Prezi, and found Prezi presentations to be a bit more interesting than previous generous products could produce, but impress.js has blown me away.  After viewing all of the example presentations, I was convinced this would suit our needs well.  I was able to produce a presentation that reused a good deal of our corporate branding in the form of existing images and css and without going too crazy with the effects, I was able to produce a very dynamic and engaging presentation.  I was able to work in familiar technologies (HTML/CSS) and code in my favorite editor, http://www.vim.org.&lt;/p&gt;

&lt;p&gt;We found Safari worked best for the effects we were using, with Chrome choking on a couple of “slides”.  It also just performed better.  Anyway, I can definitely recommend checking out impress.js.  There’s a slight learning curve, but I have found it was easy to pick up once you get started, and well worth it.&lt;/p&gt;
</description>
				<guid isPermaLink="true">http://jonsharp.net/impressjs-im-impressed/</guid>
			</item>
		
			<item>
				<title>Another great startup: WeatheRate</title>
				<link>http://jonsharp.net/my-friends-at-weatherate/</link>
				<pubDate>Tue, 13 Mar 2012 19:00:13 +0000</pubDate>
				<description>&lt;p&gt;Hi everyone,&lt;/p&gt;

&lt;p&gt;I just wanted to take the opportunity to highlight the startup effort of several friends of mine.  Their company / service is called WeatheRate, and in their words:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We specialize in the rating of overhead transmission and distribution lines for the electricity distribution sector. Our services enable our clients to defer capital and increase operational flexibility using existing network infrastructure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Please, head over to their &lt;a href=&quot;http://www.facebook.com/pages/WeatheRate/205493752885372&quot;&gt;Facebook page&lt;/a&gt; and give them a “Like.”  And if you have a need for weather-related monitoring of overhead transmission and distribution lines, sign on up! ;)&lt;/p&gt;
</description>
				<guid isPermaLink="true">http://jonsharp.net/my-friends-at-weatherate/</guid>
			</item>
		
			<item>
				<title>Retrocomputing Update</title>
				<link>http://jonsharp.net/retrocomputing-update/</link>
				<pubDate>Mon, 12 Mar 2012 14:23:41 +0000</pubDate>
				<description>&lt;p&gt;Since &lt;a href=&quot;http://www.linkedin.com/in/campgroundautomation&quot;&gt;Tyler&lt;/a&gt; and &lt;a href=&quot;http://www.linkedin.com/pub/jon-sharp/0/2a1/a4b&quot;&gt;I&lt;/a&gt; began our startup venture, &lt;a href=&quot;http://www.campgroundautomation.com&quot;&gt;Campground Automation Systems&lt;/a&gt;, 5 years ago, I may have neglected this blog, but I’ve managed to stay active in my retrocomputing/collecting efforts.  I’m always on the lookout for unique, rare or otherwise interesting vintage computer items on Craigslist and eBay and I’ve managed to find some real gems over the past several years.  As I strive to keep this site more current, I plan to feature some of these items in greater depth over the next several months.&lt;/p&gt;

&lt;p&gt;Recent acquisitions to my collection include: a Commodore 8032-SK, Apple IIc, IIe, Macintosh Portable, Mac 128K, Apple 1 Replica (Replica 1), TRS-80 Model 100, and a Canon Cat.  The Macintosh Portable required some restoration, and I’ve performed various upgrades on each of these.  I attempt to use them all, if only for a few minutes at a time.  I don’t want to see them all simply collecting dust.  I’m proud of each of them, though if I were honest, I’d have to say I’m most proud of the Cat.  It’s such a unique computer, quite unlike anything I’d used previously.  In my next Retrocomputing post, I plan to showcase the Cat and the modifications I’ve made with the help of some of the members of the Canon Cat group. (Thanks Dwight!)&lt;/p&gt;
</description>
				<guid isPermaLink="true">http://jonsharp.net/retrocomputing-update/</guid>
			</item>
		
			<item>
				<title>Raspberry Pi Ordered</title>
				<link>http://jonsharp.net/raspberry-pi-ordered/</link>
				<pubDate>Wed, 07 Mar 2012 15:14:37 +0000</pubDate>
				<description>&lt;p&gt;Like many, I have been following the developments of the &lt;a href=&quot;http://raspberrypi.org&quot;&gt;Raspberry Pi project&lt;/a&gt; with anticipation.  When the RPi was released recently, I was ready to try to get my order in at the earliest possible moment.  Unfortunately, it seems that the chosen distributors underestimated the demand and I ended up participating in the “DDOS” that crippled these sites.  In the end, I was able to “register my interest” and that allowed me several days later to place a pre-order myself.&lt;/p&gt;

&lt;p&gt;My Raspberry Pi is expected to ship in May, so I’ll have a bit of a wait, yet, but after waiting this long, what’s a few more weeks?  I have a number of ideas in mind for mine, and I’m sure like-minded geeks are going to find endless uses for the innovative device, but I’m most excited about the foundation’s vision for using the Pi as a tool for getting kids interested in programming.  I applaud their efforts and look forward to seeing the fruits of their labor in the months ahead.&lt;/p&gt;
</description>
				<guid isPermaLink="true">http://jonsharp.net/raspberry-pi-ordered/</guid>
			</item>
		
			<item>
				<title>Back on IPv6, and it feels so good</title>
				<link>http://jonsharp.net/back-on-ipv6-and-it-feels-so-good/</link>
				<pubDate>Wed, 07 Mar 2012 03:54:58 +0000</pubDate>
				<description>&lt;p&gt;I had let my &lt;a href=&quot;http://he.net&quot;&gt;Hurricane Electric&lt;/a&gt; tunnelbroker account lapse several years ago when shuffling around my OpenWrt builds.  At that time I determined that I didn’t need the extra overhead imposed by the tunnelbroker.&lt;/p&gt;

&lt;p&gt;Having recently upgraded from my trusty Linksys WRT54G, to an x86 Alix router platform, I decided to reactivate my IPv6 tunnel.  It was a piece o’ cake.  I was then able to update my DNS records and bring JonSharp.net and JonandJolene.com back on IPv6.  It feels good to be back. ;)&lt;/p&gt;
</description>
				<guid isPermaLink="true">http://jonsharp.net/back-on-ipv6-and-it-feels-so-good/</guid>
			</item>
		
			<item>
				<title>Shamelessly promoting my company, Campground Automation Systems</title>
				<link>http://jonsharp.net/shamelessly-promoting-my-company-campground-automation-systems/</link>
				<pubDate>Tue, 06 Mar 2012 05:20:01 +0000</pubDate>
				<description>&lt;p&gt;Hey Internets,&lt;/p&gt;

&lt;p&gt;I have this great company I started with my friend, Tyler Duffy, named &lt;a href=&quot;http://www.campgroundautomation.com&quot;&gt;Campground Automation Systems&lt;/a&gt;.  With our team, I’ve been very busy building &lt;a href=&quot;http://www.campgroundautomation.com/sunrise-hardware-kiosk-and-control#kiosk&quot;&gt;outdoor Kiosks&lt;/a&gt;, designing &lt;a href=&quot;http://www.campgroundautomation.com/sunrise-hardware-kiosk-and-control#control&quot;&gt;wireless utility control&lt;/a&gt; devices, and writing &lt;a href=&quot;http://www.campgroundautomation.com/sunrise-software&quot;&gt;software&lt;/a&gt; to tie it all together for the past 5 years – which is why this blog has been so neglected.&lt;/p&gt;

&lt;p&gt;We provide &lt;a href=&quot;http://www.sunrisereservations.com&quot;&gt;online reservations&lt;/a&gt; for campgrounds and RV Parks through our &lt;a href=&quot;http://www.sunrisereservations.com&quot;&gt;SunriseReservations.com&lt;/a&gt; portal site.&lt;/p&gt;

&lt;p&gt;We don’t just do online reservations through our central reservation system, (CRS) we have a complete &lt;a href=&quot;http://www.campgroundautomation.com/Sunrise&quot;&gt;campground management software&lt;/a&gt; package named &lt;a href=&quot;http://www.campgroundautomation.com/sunrise-software&quot;&gt;Sunrise&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Stop by our site and read all about it, then visit us on &lt;a href=&quot;http://www.facebook.com/pages/Campground-Automation-Systems/110944752283900&quot;&gt;Facebook&lt;/a&gt; and “Like” us!&lt;/p&gt;
</description>
				<guid isPermaLink="true">http://jonsharp.net/shamelessly-promoting-my-company-campground-automation-systems/</guid>
			</item>
		
			<item>
				<title>Bearwaller Gap Trail</title>
				<link>http://jonsharp.net/bearwaller-gap-trail/</link>
				<pubDate>Tue, 06 Mar 2012 04:36:34 +0000</pubDate>
				<description>&lt;p&gt;Corin and I took our first father-son hike together on the Bearwaller Gap Trail, along Cordell Hull Lake.&lt;/p&gt;
</description>
				<guid isPermaLink="true">http://jonsharp.net/bearwaller-gap-trail/</guid>
			</item>
		
			<item>
				<title>TI's MSP430 Launchpad: Budget Embedded</title>
				<link>http://jonsharp.net/tis-msp430-launchpad-budget-embedded/</link>
				<pubDate>Tue, 06 Mar 2012 03:11:13 +0000</pubDate>
				<description>&lt;p&gt;I recently ran across an ad for &lt;a href=&quot;http://www.ti.com/tool/msp-exp430g2&quot;&gt;TI’s MSP430 Launchpad&lt;/a&gt; 16-bit embedded microcontroller kit.  How did I miss this before now?  $4.30 for a complete 16-bit microcontroller development kit?  Needless to say, I ordered one.  I probably should’ve ordered several. ;)  Don’t get me wrong, I still love my trusty &lt;a href=&quot;http://en.wikipedia.org/wiki/Atmel_AVR&quot;&gt;8-bit AVRs&lt;/a&gt;, but for the price, you can’t go wrong.  Surely you can find something to do with another micro?&lt;/p&gt;

&lt;p&gt;Obviously, the price has a strong appeal here, but the true draw (pun intended) is the amazing power budget afforded by this micro.  TI has posted several Youtube vids demonstrating the device running on things like grapes and potatoes, just to show off.  Real-world applications might require more juice than that, but the MSP430 starts to make small-scale &lt;a href=&quot;http://en.wikipedia.org/wiki/Energy_harvesting&quot;&gt;energy harvesting&lt;/a&gt; look practical.  And &lt;i&gt;this&lt;/i&gt; is what really starts capturing &lt;i&gt;my&lt;/i&gt; imagination.&lt;/p&gt;

&lt;p&gt;I’ve only barely begun to play with my Launchpad, having tested the various examples using each of the major toolchains available.  So far, I’m impressed.  For now, the Launchpad’s in the drawer, waiting for my next low-power / energy-harvesting application.  What will it be?&lt;/p&gt;
</description>
				<guid isPermaLink="true">http://jonsharp.net/tis-msp430-launchpad-budget-embedded/</guid>
			</item>
		
			<item>
				<title>Summary for RetroChallenge 2009</title>
				<link>http://jonsharp.net/summary-for-retrochallenge-2009/</link>
				<pubDate>Fri, 31 Jul 2009 23:17:13 +0000</pubDate>
				<description>&lt;p&gt;Wow, what a fun challenge this has been!  While I certainly ran into a number of difficulties, for my first RetroChallenge, I’m pleased to say that I consider my project a relative success.  After all, I was able to get my //e talking to my wife’s Sanyo Katana without issue.  And I even managed to get it to talk to my Treo, I just couldn’t get the Treo to talk back. ;)  I have created a &lt;a href=&quot;http://www.jonsharp.net/projects-personal/blueooth-project/&quot;&gt;separate project page&lt;/a&gt; for this project, complete with more pictures, that I will use to continue the project beyond the challenge.  I’ll continue to post updates there, as well.  Check out that page for a more detailed summary of the project.&lt;/p&gt;

&lt;p&gt;So I ended up proving that the //e could use the bluetooth module to talk to phones supporting the DUN profile without issue, and I received confirmation that it works with other Treos. (just not mine, for some reason)  I never managed to determine the exact cause of my Treo’s failures.  I do not know if it is a problem that affects all Sprint Treos, or ones with a certain firmware, but it certainly doesn’t affect all Treo’s.&lt;/p&gt;

&lt;p&gt;As far as my goal to have a full design prepared for the interface card, I just didn’t get there.  Wrestling with the Treo really slowed me down there.  Not to mention the fact that my most important prototyping parts that I ordered from ReactiveMicro.com still have not arrived.  I suppose it was just bad timing, with KFest going on and all.  I have the design mostly done and I posted a pic to the project page.&lt;/p&gt;

&lt;p&gt;I definitely had a great time with this project and learned a tremendous amount.  While I didn’t get to complete as much of the project this month as I had hoped, my success to this point encourages me to continue the project to its eventual completion in the weeks to come.  I also have some additional ideas for features I’d like to add to the design and should have the time now to see about those.  So please, stay tuned for more updates.&lt;/p&gt;
</description>
				<guid isPermaLink="true">http://jonsharp.net/summary-for-retrochallenge-2009/</guid>
			</item>
		
	</channel>
</rss>
